"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _koaRouter = _interopRequireDefault(require("koa-router"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getNextId = function getNextId() {
  return Number(_lodash.default.uniqueId());
};

var _default = function _default(router, io) {
  var generalChannelId = getNextId();
  var randomChannelId = getNextId();
  var defaultState = {
    channels: [{
      id: generalChannelId,
      name: 'general',
      removable: false
    }, {
      id: randomChannelId,
      name: 'random',
      removable: false
    }],
    messages: [],
    currentChannelId: generalChannelId
  };

  var state = _objectSpread({}, defaultState);

  var apiRouter = new _koaRouter.default();
  apiRouter.get('/channels', function (ctx) {
    ctx.body = Object.values(state.channels);
    ctx.status = 301;
  }).post('/channels', function (ctx) {
    var name = ctx.request.body.data.attributes.name;
    var channel = {
      name: name,
      removable: true,
      id: getNextId()
    };
    state.channels.push(channel);
    ctx.status = 201;
    var data = {
      data: {
        type: 'channels',
        id: channel.id,
        attributes: channel
      }
    };
    ctx.body = data;
    io.emit('newChannel', data);
  }).delete('/channels/:id', function (ctx) {
    var channelId = Number(ctx.params.id);
    state.channels = state.channels.filter(function (c) {
      return c.id !== channelId;
    });
    state.messages = state.messages.filter(function (m) {
      return m.channelId !== channelId;
    });
    ctx.status = 204;
    var data = {
      data: {
        type: 'channels',
        id: channelId
      }
    };
    io.emit('removeChannel', data);
  }).patch('/channels/:id', function (ctx) {
    var channelId = Number(ctx.params.id);
    var channel = state.channels.find(function (c) {
      return c.id === channelId;
    });
    var attributes = ctx.request.body.data.attributes;
    channel.name = attributes.name;
    ctx.status = 204;
    var data = {
      data: {
        type: 'channels',
        id: channelId,
        attributes: channel
      }
    };
    io.emit('renameChannel', data);
  }).get('/channels/:channelId/messages', function (ctx) {
    var messages = state.messages.filter(function (m) {
      return m.channelId === ctx.params.channelId;
    });
    var resources = messages.map(function (m) {
      return {
        type: 'channels',
        id: m.id,
        attributes: m
      };
    });
    ctx.body = resources;
  }).post('/channels/:channelId/messages', function (ctx) {
    var attributes = ctx.request.body.data.attributes;

    var message = _objectSpread({}, attributes, {
      channelId: Number(ctx.params.channelId),
      id: getNextId()
    });

    state.messages.push(message);
    ctx.status = 201;
    var data = {
      data: {
        type: 'messages',
        id: message.id,
        attributes: message
      }
    };
    ctx.body = data;
    io.emit('newMessage', data);
  });
  return router.get('root', '/', function (ctx) {
    ctx.render('index', {
      gon: state
    });
  }).use('/api/v1', apiRouter.routes(), apiRouter.allowedMethods());
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,